#include "../include/astro_math.h"
#include "../include/core_math.h"

namespace smalltime
{
	namespace math
	{
		static const std::array<RD, 10> KOTERMS = { -4680.93, -1.55, 1999.25, -51.38, -249.67, -39.05, 7.12, 27.87, 5.79, 2.45 };
		static constexpr RD KJ2000 = 2451545.0;							// Julian day of J2000 epoch
		static constexpr RD KJULIAN_CENTURY = 36525.0;				    // Days in Julian century
		static constexpr RD KJULIAN_MILLENNIUM = (KJULIAN_CENTURY * 10);    // Days in Julian millennium
		static constexpr RD KASTRONOMICAL_UNIT = 149597870.0;				// Astronomical unit in kilometres
		static constexpr RD KTROPICAL_YEAR = 365.24219878;


		static std::array<int, 315> KNUT_ARG_MULT = {
				0, 0, 0, 0, 1,
				-2, 0, 0, 2, 2,
				0, 0, 0, 2, 2,
				0, 0, 0, 0, 2,
				0, 1, 0, 0, 0,
				0, 0, 1, 0, 0,
				-2, 1, 0, 2, 2,
				0, 0, 0, 2, 1,
				0, 0, 1, 2, 2,
				-2, -1, 0, 2, 2,
				-2, 0, 1, 0, 0,
				-2, 0, 0, 2, 1,
				0, 0, -1, 2, 2,
				2, 0, 0, 0, 0,
				0, 0, 1, 0, 1,
				2, 0, -1, 2, 2,
				0, 0, -1, 0, 1,
				0, 0, 1, 2, 1,
				-2, 0, 2, 0, 0,
				0, 0, -2, 2, 1,
				2, 0, 0, 2, 2,
				0, 0, 2, 2, 2,
				0, 0, 2, 0, 0,
				-2, 0, 1, 2, 2,
				0, 0, 0, 2, 0,
				-2, 0, 0, 2, 0,
				0, 0, -1, 2, 1,
				0, 2, 0, 0, 0,
				2, 0, -1, 0, 1,
				-2, 2, 0, 2, 2,
				0, 1, 0, 0, 1,
				-2, 0, 1, 0, 1,
				0, -1, 0, 0, 1,
				0, 0, 2, -2, 0,
				2, 0, -1, 2, 1,
				2, 0, 1, 2, 2,
				0, 1, 0, 2, 2,
				-2, 1, 1, 0, 0,
				0, -1, 0, 2, 2,
				2, 0, 0, 2, 1,
				2, 0, 1, 0, 0,
				-2, 0, 2, 2, 2,
				-2, 0, 1, 2, 1,
				2, 0, -2, 0, 1,
				2, 0, 0, 0, 1,
				0, -1, 1, 0, 0,
				-2, -1, 0, 2, 1,
				-2, 0, 0, 0, 1,
				0, 0, 2, 2, 1,
				-2, 0, 2, 0, 1,
				-2, 1, 0, 2, 1,
				0, 0, 1, -2, 0,
				-1, 0, 1, 0, 0,
				-2, 1, 0, 0, 0,
				1, 0, 0, 0, 0,
				0, 0, 1, 2, 0,
				-1, -1, 1, 0, 0,
				0, 1, 1, 0, 0,
				0, -1, 1, 2, 2,
				2, -1, -1, 2, 2,
				0, 0, -2, 2, 2,
				0, 0, 3, 2, 2,
				2, -1, 0, 2, 2
		};

		static std::array<int, 252> KNUT_ARG_COEFF = {
			-171996, -1742, 92095, 89,          /*  0,  0,  0,  0,  1 */
			-13187, -16, 5736, -31,          /* -2,  0,  0,  2,  2 */
			-2274, -2, 977, -5,          /*  0,  0,  0,  2,  2 */
			2062, 2, -895, 5,          /*  0,  0,  0,  0,  2 */
			1426, -34, 54, -1,          /*  0,  1,  0,  0,  0 */
			712, 1, -7, 0,          /*  0,  0,  1,  0,  0 */
			-517, 12, 224, -6,          /* -2,  1,  0,  2,  2 */
			-386, -4, 200, 0,          /*  0,  0,  0,  2,  1 */
			-301, 0, 129, -1,          /*  0,  0,  1,  2,  2 */
			217, -5, -95, 3,          /* -2, -1,  0,  2,  2 */
			-158, 0, 0, 0,          /* -2,  0,  1,  0,  0 */
			129, 1, -70, 0,          /* -2,  0,  0,  2,  1 */
			123, 0, -53, 0,          /*  0,  0, -1,  2,  2 */
			63, 0, 0, 0,          /*  2,  0,  0,  0,  0 */
			63, 1, -33, 0,          /*  0,  0,  1,  0,  1 */
			-59, 0, 26, 0,          /*  2,  0, -1,  2,  2 */
			-58, -1, 32, 0,          /*  0,  0, -1,  0,  1 */
			-51, 0, 27, 0,          /*  0,  0,  1,  2,  1 */
			48, 0, 0, 0,          /* -2,  0,  2,  0,  0 */
			46, 0, -24, 0,          /*  0,  0, -2,  2,  1 */
			-38, 0, 16, 0,          /*  2,  0,  0,  2,  2 */
			-31, 0, 13, 0,          /*  0,  0,  2,  2,  2 */
			29, 0, 0, 0,          /*  0,  0,  2,  0,  0 */
			29, 0, -12, 0,          /* -2,  0,  1,  2,  2 */
			26, 0, 0, 0,          /*  0,  0,  0,  2,  0 */
			-22, 0, 0, 0,          /* -2,  0,  0,  2,  0 */
			21, 0, -10, 0,          /*  0,  0, -1,  2,  1 */
			17, -1, 0, 0,          /*  0,  2,  0,  0,  0 */
			16, 0, -8, 0,          /*  2,  0, -1,  0,  1 */
			-16, 1, 7, 0,          /* -2,  2,  0,  2,  2 */
			-15, 0, 9, 0,          /*  0,  1,  0,  0,  1 */
			-13, 0, 7, 0,          /* -2,  0,  1,  0,  1 */
			-12, 0, 6, 0,          /*  0, -1,  0,  0,  1 */
			11, 0, 0, 0,          /*  0,  0,  2, -2,  0 */
			-10, 0, 5, 0,          /*  2,  0, -1,  2,  1 */
			-8, 0, 3, 0,          /*  2,  0,  1,  2,  2 */
			7, 0, -3, 0,          /*  0,  1,  0,  2,  2 */
			-7, 0, 0, 0,          /* -2,  1,  1,  0,  0 */
			-7, 0, 3, 0,          /*  0, -1,  0,  2,  2 */
			-7, 0, 3, 0,          /*  2,  0,  0,  2,  1 */
			6, 0, 0, 0,          /*  2,  0,  1,  0,  0 */
			6, 0, -3, 0,          /* -2,  0,  2,  2,  2 */
			6, 0, -3, 0,          /* -2,  0,  1,  2,  1 */
			-6, 0, 3, 0,          /*  2,  0, -2,  0,  1 */
			-6, 0, 3, 0,          /*  2,  0,  0,  0,  1 */
			5, 0, 0, 0,          /*  0, -1,  1,  0,  0 */
			-5, 0, 3, 0,          /* -2, -1,  0,  2,  1 */
			-5, 0, 3, 0,          /* -2,  0,  0,  0,  1 */
			-5, 0, 3, 0,          /*  0,  0,  2,  2,  1 */
			4, 0, 0, 0,          /* -2,  0,  2,  0,  1 */
			4, 0, 0, 0,          /* -2,  1,  0,  2,  1 */
			4, 0, 0, 0,          /*  0,  0,  1, -2,  0 */
			-4, 0, 0, 0,          /* -1,  0,  1,  0,  0 */
			-4, 0, 0, 0,          /* -2,  1,  0,  0,  0 */
			-4, 0, 0, 0,          /*  1,  0,  0,  0,  0 */
			3, 0, 0, 0,          /*  0,  0,  1,  2,  0 */
			-3, 0, 0, 0,          /* -1, -1,  1,  0,  0 */
			-3, 0, 0, 0,          /*  0,  1,  1,  0,  0 */
			-3, 0, 0, 0,          /*  0, -1,  1,  2,  2 */
			-3, 0, 0, 0,          /*  2, -1, -1,  2,  2 */
			-3, 0, 0, 0,          /*  0,  0, -2,  2,  2 */
			-3, 0, 0, 0,          /*  0,  0,  3,  2,  2 */
			-3, 0, 0, 0           /*  2, -1,  0,  2,  2 */
		};

		//====================================================
		// Oblique equation
		//====================================================
		RD ObliqEq(RD rd)
		{
			RD eps = 0.0, u = 0.0, v = 0.0;
			int i = 0;

			v = u = (rd - KJ2000) / (KJULIAN_CENTURY * 100.0);

			eps = 23.0 + (26.0 / 60.0) + (21.448 / 3600.0);

			if (abs(u) < 1.0)
			{
				for (i = 0; i < 10; i++)
				{
					eps += (KOTERMS[i] / 3600.0) * v;
					v *= u;
				}
			}
			return eps;
		}

		//==================================================
		// Calculate the nutation in longitude, deltaPsi, and
		// obliquity, deltaEpsilon for a given Julian date
		// jd.Results are returned as a two element Array
		// giving(deltaPsi, deltaEpsilon) in degrees.
		//==================================================
		std::pair<RD, RD> Nutation(RD rd)
		{
			RD deltaPsi = 0.0, deltaEpsilon = 0.0;
			int	i = 0, j = 0;
			RD	t = (rd - 2451545.0) / 36525.0;
			RD t2 = 0.0, t3 = 0.0, to10 = 0.0;
			std::array<RD, 4> ta = { 0.0 };
			RD dp = 0.0, de = 0.0, ang = 0.0;

			t3 = t * (t2 = t * t);

			/* Calculate angles.  The correspondence between the elements
			of our array and the terms cited in Meeus are:

			ta[0] = D  ta[0] = M  ta[2] = M'  ta[3] = F  ta[4] = \Omega

			*/

			ta[0] = DegToRad(297.850363 + 445267.11148 * t - 0.0019142 * t2 +
				t3 / 189474.0);
			ta[1] = DegToRad(357.52772 + 35999.05034 * t - 0.0001603 * t2 -
				t3 / 300000.0);
			ta[2] = DegToRad(134.96298 + 477198.867398 * t + 0.0086972 * t2 +
				t3 / 56250.0);
			ta[3] = DegToRad(93.27191 + 483202.017538 * t - 0.0036825 * t2 +
				t3 / 327270);
			ta[4] = DegToRad(125.04452 - 1934.136261 * t + 0.0020708 * t2 +
				t3 / 450000.0);

			/* Range reduce the angles in case the sine and cosine functions
			don't do it as accurately or quickly. */

			for (i = 0; i < 5; i++)
			{
				ta[i] = FixAngr(ta[i]);
			}

			to10 = t / 10.0;
			for (i = 0; i < 63; i++)
			{
				ang = 0;
				for (j = 0; j < 5; j++)
				{
					if (KNUT_ARG_MULT[(i * 5) + j] != 0)
					{
						ang += KNUT_ARG_MULT[(i * 5) + j] * ta[j];
					}
				}
				dp += (KNUT_ARG_COEFF[(i * 4) + 0] + KNUT_ARG_COEFF[(i * 4) + 1] * to10) * sin(ang);
				de += (KNUT_ARG_COEFF[(i * 4) + 2] + KNUT_ARG_COEFF[(i * 4) + 3] * to10) * cos(ang);
			}

			/* Return the result, converting from ten thousandths of arc
			seconds to radians in the process. */

			deltaPsi = dp / (3600.0 * 10000.0);
			deltaEpsilon = de / (3600.0 * 10000.0);

			return std::make_pair(deltaPsi, deltaEpsilon);
		}

		//==========================================================
		// Compute equation of time for a given moment.
		// Returns the equation of time as a fraction of a day
		//===========================================================
		RD EquationOfTime(RD rd)
		{
			return 0.0;
		}


	}
}